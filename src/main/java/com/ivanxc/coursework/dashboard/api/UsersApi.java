/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ivanxc.coursework.dashboard.api;

import com.ivanxc.coursework.dashboard.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.Optional;
import javax.annotation.Generated;
import javax.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-07T20:46:55.234864500+03:00[Europe/Moscow]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users/create : Create a user
     *
     * @param user  (required)
     * @return User created (status code 201)
     *         or Incorrect data (status code 400)
     */
    @Operation(
        operationId = "usersCreatePost",
        summary = "Create a user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created"),
            @ApiResponse(responseCode = "400", description = "Incorrect data", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  String.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersCreatePost(
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/me : Delete an user
     *
     * @return User deleted (status code 204)
     */
    @Operation(
        operationId = "usersMeDelete",
        summary = "Delete an user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/me"
    )
    default ResponseEntity<Void> usersMeDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/me : Get a user info
     *
     * @return Get a existing user (status code 200)
     */
    @Operation(
        operationId = "usersMeGet",
        summary = "Get a user info",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get a existing user", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/me",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersMeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"qwerty12345\", \"name\" : \"John Doe\", \"id\" : 1, \"forms\" : [ 1, 2, 3 ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/me : Change an user data
     *
     * @param user  (required)
     * @return User data changed (status code 200)
     *         or Incorrect parameters (status code 404)
     */
    @Operation(
        operationId = "usersMePut",
        summary = "Change an user data",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User data changed"),
            @ApiResponse(responseCode = "404", description = "Incorrect parameters")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/me",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersMePut(
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : User log in
     *
     * @param user  (required)
     * @return Correct login and password (status code 200)
     *         or Incorrect password (status code 401)
     *         or There is no user with entered login (status code 403)
     */
    @Operation(
        operationId = "usersPost",
        summary = "User log in",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Correct login and password"),
            @ApiResponse(responseCode = "401", description = "Incorrect password"),
            @ApiResponse(responseCode = "403", description = "There is no user with entered login")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersPost(
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
