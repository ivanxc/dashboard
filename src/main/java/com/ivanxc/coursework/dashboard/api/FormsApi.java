/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ivanxc.coursework.dashboard.api;

import com.ivanxc.coursework.dashboard.model.ElementOnForm;
import com.ivanxc.coursework.dashboard.model.Form;
import com.ivanxc.coursework.dashboard.model.User;
import com.ivanxc.coursework.dashboard.model.UserOnForm;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;
import javax.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-07T20:46:55.234864500+03:00[Europe/Moscow]")
@Validated
@Tag(name = "forms", description = "the forms API")
public interface FormsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /forms/create : Create a form
     *
     * @param form  (required)
     * @return Form created (status code 201)
     *         or User is unauthorized (status code 401)
     */
    @Operation(
        operationId = "formsCreatePost",
        summary = "Create a form",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Form created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Long.class))),
            @ApiResponse(responseCode = "401", description = "User is unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forms/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Long> formsCreatePost(
        @Parameter(name = "Form", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody Form form
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "1";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /forms/{formId}/element/{elementOnFormId} : Delete an element from form
     *
     * @param formId ID of form (required)
     * @param elementOnFormId ID of form (required)
     * @return Element deleted (status code 204)
     *         or Element is unauthorized (status code 401)
     *         or Element has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsFormIdElementElementOnFormIdDelete",
        summary = "Delete an element from form",
        tags = { "element", "form" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Element deleted"),
            @ApiResponse(responseCode = "401", description = "Element is unauthorized"),
            @ApiResponse(responseCode = "403", description = "Element has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/forms/{formId}/element/{elementOnFormId}"
    )
    default ResponseEntity<Void> formsFormIdElementElementOnFormIdDelete(
        @Parameter(name = "formId", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("formId") Long formId,
        @Parameter(name = "elementOnFormId", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("elementOnFormId") Long elementOnFormId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /forms/{formId}/users/{userId} : Delete an user from form
     *
     * @param formId ID of form (required)
     * @param userId ID of user (required)
     * @return User deleted (status code 204)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsFormIdUsersUserIdDelete",
        summary = "Delete an user from form",
        tags = { "user", "form" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/forms/{formId}/users/{userId}"
    )
    default ResponseEntity<Void> formsFormIdUsersUserIdDelete(
        @Parameter(name = "formId", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("formId") Long formId,
        @Parameter(name = "userId", description = "ID of user", required = true, schema = @Schema(description = "")) @PathVariable("userId") Long userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /forms/{id} : Delete an form
     *
     * @param id ID of form (required)
     * @return Form deleted (status code 204)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     */
    @Operation(
        operationId = "formsIdDelete",
        summary = "Delete an form",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Form deleted"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/forms/{id}"
    )
    default ResponseEntity<Void> formsIdDelete(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{id}/element : Get an elements of form
     *
     * @param id ID of form (required)
     * @return Elements of form was returned (status code 200)
     *         or User is unauthorized (status code 401)
     *         or User has no access to form (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdElementGet",
        summary = "Get an elements of form",
        tags = { "element", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Elements of form was returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ElementOnForm.class))),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no access to form"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{id}/element",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ElementOnForm>> formsIdElementGet(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"formId\" : 1, \"elementDefinitionId\" : 1, \"name\" : \"task\", \"attributes\" : [ { \"name\" : \"size\", \"id\" : 1, \"value\" : \"14\" }, { \"name\" : \"size\", \"id\" : 1, \"value\" : \"14\" } ], \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /forms/{id}/element : Add element to the form
     *
     * @param id ID of form (required)
     * @param elementOnForm  (required)
     * @return Element was added to form (status code 200)
     *         or Wrong parameters (status code 400)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdElementPost",
        summary = "Add element to the form",
        tags = { "element", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Element was added to form", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ElementOnForm.class))),
            @ApiResponse(responseCode = "400", description = "Wrong parameters"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forms/{id}/element",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ElementOnForm>> formsIdElementPost(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "ElementOnForm", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody ElementOnForm elementOnForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"formId\" : 1, \"elementDefinitionId\" : 1, \"name\" : \"task\", \"attributes\" : [ { \"name\" : \"size\", \"id\" : 1, \"value\" : \"14\" }, { \"name\" : \"size\", \"id\" : 1, \"value\" : \"14\" } ], \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /forms/{id}/element : Change an element attributes in form
     *
     * @param id ID of form (required)
     * @param elementOnForm  (required)
     * @return Element was changed in form (status code 200)
     *         or Wrong parameters (status code 400)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdElementPut",
        summary = "Change an element attributes in form",
        tags = { "element", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Element was changed in form"),
            @ApiResponse(responseCode = "400", description = "Wrong parameters"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/forms/{id}/element",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> formsIdElementPut(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "ElementOnForm", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody ElementOnForm elementOnForm
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{id} : Get a form by id
     *
     * @param id ID of form (required)
     * @return Form was returned (status code 200)
     *         or Not enough privileges (status code 401)
     *         or Form is not found (status code 404)
     */
    @Operation(
        operationId = "formsIdGet",
        summary = "Get a form by id",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Form was returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Form.class))),
            @ApiResponse(responseCode = "401", description = "Not enough privileges"),
            @ApiResponse(responseCode = "404", description = "Form is not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Form> formsIdGet(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created\" : \"2022-01-01 16:00:00\", \"elements\" : [ 0, 0 ], \"id\" : 1, \"type\" : \"canban\", \"title\" : \"My canban\", \"updated\" : \"2022-02-02 16:00:00\", \"users\" : [ 1, 2, 3 ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /forms/{id} : Change a title of form
     *
     * @param id ID of form (required)
     * @param body  (required)
     * @return User data changed (status code 200)
     *         or User is unauthorized (status code 401)
     */
    @Operation(
        operationId = "formsIdPut",
        summary = "Change a title of form",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User data changed"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/forms/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> formsIdPut(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "body", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{id}/users : Get a users of form
     *
     * @param id ID of form (required)
     * @return Users of form was returned (status code 200)
     *         or User is unauthorized (status code 401)
     *         or User has no access to form (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdUsersGet",
        summary = "Get a users of form",
        tags = { "user", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users of form was returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no access to form"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{id}/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> formsIdUsersGet(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"qwerty12345\", \"name\" : \"John Doe\", \"id\" : 1, \"forms\" : [ 1, 2, 3 ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /forms/{id}/users : Add user to the form
     *
     * @param id ID of form (required)
     * @param user  (required)
     * @return User was added to form (status code 200)
     *         or Wrong parameters (status code 400)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdUsersPost",
        summary = "Add user to the form",
        tags = { "user", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User was added to form"),
            @ApiResponse(responseCode = "400", description = "Wrong parameters"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forms/{id}/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> formsIdUsersPost(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /forms/{id}/users : Change an user role in form
     *
     * @param id ID of form (required)
     * @param userOnForm  (required)
     * @return User&#39;s role in form was changed (status code 200)
     *         or Wrong parameters (status code 400)
     *         or User is unauthorized (status code 401)
     *         or User has no enough rights (status code 403)
     *         or Form not found (status code 404)
     */
    @Operation(
        operationId = "formsIdUsersPut",
        summary = "Change an user role in form",
        tags = { "user", "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's role in form was changed"),
            @ApiResponse(responseCode = "400", description = "Wrong parameters"),
            @ApiResponse(responseCode = "401", description = "User is unauthorized"),
            @ApiResponse(responseCode = "403", description = "User has no enough rights"),
            @ApiResponse(responseCode = "404", description = "Form not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/forms/{id}/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> formsIdUsersPut(
        @Parameter(name = "id", description = "ID of form", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "UserOnForm", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody UserOnForm userOnForm
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
